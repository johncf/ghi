#!/usr/bin/env python3

import argparse
import json
import os
import platform
import re
from pathlib import Path

import requests

_TARGET_DIR = Path.home() / ".local" / "bin"
GHI_TARGET_DIR = os.environ.get("GHI_TARGET_DIR", str(_TARGET_DIR))


def cli():
    parser = argparse.ArgumentParser()
    parser.add_argument("--target", type=str, default=GHI_TARGET_DIR, help=f"install target directory [default: {GHI_TARGET_DIR}]")
    subparsers = parser.add_subparsers(required=True)

    # get command
    parser_get = subparsers.add_parser("get", help="download a github release")
    parser_get.add_argument("repo", type=str, help="name or url of the repo")
    parser_get.add_argument("-k", action='append', help=f"additional keywords for ranking the release assets [base: {get_platform_keywords()}]")
    parser_get.add_argument("--tag", default=None, help=f"github release tag [default: latest]")
    parser_get.set_defaults(func=cli_get)

    # ls command
    parser_ls = subparsers.add_parser("ls", help="list releases")
    parser_ls.add_argument("repo", type=str, help="name or url of the repo")
    parser_ls.set_defaults(func=cli_ls)

    args = parser.parse_args()
    args.func(args)


GITHUB_API_HEADERS = {"Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"}

def cli_get(args):
    owner, repo = process_github_url(args.repo)
    version = "latest" if args.tag is None else f"tags/{args.tag}"
    keywords = args.k or []
    keywords.extend(get_platform_keywords())

    response = requests.get(
        f"https://api.github.com/repos/{owner}/{repo}/releases/{version}",
        headers=GITHUB_API_HEADERS,
    )
    data = response.json()
    print(json.dumps(data, indent=4))


def cli_ls(args):
    owner, repo = process_github_url(args.repo)
    response = requests.get(
        f"https://api.github.com/repos/{owner}/{repo}/releases",
        headers=GITHUB_API_HEADERS,
    )
    data = response.json()
    # print(json.dumps(data))
    # TODO error handling
    for release in data:
        print(release["tag_name"], "::", release["published_at"])


def process_github_url(repo_url):
    if not repo_url.startswith("https:"):
        repo_url = f"https://github.com/{repo_url}"
    pattern = r"^https://github\.com/([^/]+)/([^/]+)"
    match = re.match(pattern, repo_url)
    if match:
        return match.group(1), match.group(2)
    else:
        raise ValueError(f"Invalid Github URL: {repo_url}")


def get_platform_keywords():
    keywords = []
    system = platform.system().lower()
    if system == "linux":
        keywords.extend(["linux", "unknown"])
    elif system == "windows":
        keywords.extend(["windows", "msvc", "-pc", ".msi", ".exe"])
    elif system == "darwin":
        keywords.extend(["apple", "darwin"])
    else:
        keywords.append(system)
    machine = platform.machine().lower()
    if machine in {"x86_64", "amd64"}:
        keywords.extend(["x86_64", "amd64", "x64"])
    else:
        keywords.append(machine)
    return keywords


if __name__ == "__main__":
    cli()
